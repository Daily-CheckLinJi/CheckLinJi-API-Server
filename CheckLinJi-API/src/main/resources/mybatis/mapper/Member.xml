<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.upside.api.mapper.MemberMapper">
	
	<!-- 내 미션 달성 횟수 , 참가자 평균 -->
	<select id="missionCompletedCnt" parameterType="MemberDto" resultType="java.util.Map" >
	SELECT  (SELECT COALESCE(ROUND(AVG(COUNT), 0), 0) FROM (
		   SELECT COUNT(*) as count
		 	 FROM CHALLENGE_SUBMISSION CS 
			  JOIN USER_CHALLENGE UC 
			   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
			  WHERE YEAR(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{year} 
			  	AND MONTH(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{month}
			  GROUP BY UC.EMAIL ) AS counts) AS userAvg , 
		count(*) AS own  		
		 FROM CHALLENGE_SUBMISSION CS 
		  JOIN USER_CHALLENGE UC 
		   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
		  WHERE YEAR(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{year} 
			  	AND MONTH(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{month}
		   		AND UC.EMAIL = #{email}						 
	</select>
	
	<!-- 내 미션 달성 횟수 , 참가자 평균 -->
	<select id="missionCompletedCntAll" parameterType="MemberDto" resultType="int" >
	SELECT  
		count(*) AS missionCnt  		
		 FROM CHALLENGE_SUBMISSION CS 
		  JOIN USER_CHALLENGE UC 
		   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
		  WHERE UC.EMAIL = #{email}							 
	</select>	

	<!-- 실시간 랭킹 TOP 3 -->
	<select id="missionRankingTop" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT  rank as ranking
			   ,USER_SEQ as userSeq
			   ,EMAIL as email
			   ,nick_name as NICK_NAME
			   ,SUCCESS_CNT as successCnt
			   ,JOIN_DATE as joinDate
			   ,grade
			   ,profile
				FROM RANKING_TOP RT ORDER BY ranking
	</select>
	
	<!-- 랭킹 업데이트 -->
	<update id="insertRankingTop" >
		INSERT INTO RANKING_TOP
		   select
		            ROW_NUMBER() OVER (ORDER BY 
			        IF(DATEDIFF(CURDATE(), MAX(SUBMISSION_DATE)) = 0, 30, 0) 
			        + IFNULL(SUM(DATEDIFF(CURDATE(), SUBMISSION_DATE) BETWEEN 1 AND 7), 0) * 4.3 
			        + IFNULL(SUM(DATEDIFF(CURDATE(), SUBMISSION_DATE) BETWEEN 1 AND 31), 0) * 1        
			        DESC
			    	) as rank
		    	  , MI.EMAIL 
		    	  , MI.GRADE   	
		    	  , IF(TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE), NOW()) = 0, 1, TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE), NOW()) + 1) AS join_date 
		  		  , MI.nick_name
		  		  , MI.PROFILE   		  
		  		  , COUNT(*) AS success_cnt  	
		  		  , NOW() as update_date
		  		  , UC.user_challenge_id as user_seq  		  
			FROM
		    	CHALLENGE_SUBMISSION CS
		    JOIN USER_CHALLENGE UC ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
		    JOIN MEMBER_INFO MI ON UC.EMAIL = MI.EMAIL 		
			GROUP BY
		    	UC.EMAIL ;
	</update>
	
	<!-- 실시간 랭킹 TOP 3 삭제 -->
	<delete id="deleteRankingTop">
		DELETE FROM ranking_top 
	</delete>		
	
	<!-- 실시간 본인 랭킹 -->
	<select id="missionRankingOwn" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT  rank 
			   ,USER_SEQ as userSeq
			   ,EMAIL as email
			   ,nick_name as nickName
			   ,SUCCESS_CNT as successCnt
			   ,JOIN_DATE as joinDate
			   ,grade
			   ,profile
				FROM RANKING_TOP RT WHERE EMAIL = #{email} order by rank
	</select>
	
		<!-- 실시간 본인 랭킹 -->
	<select id="missionRankingOwnInfo" parameterType="MemberDto" resultType="java.util.Map" >
			    SELECT   UC.EMAIL as email	
			    	   , MI.NICK_NAME as nickName
			    	   , COUNT(*) AS successCnt
			    	   , IF(TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE), NOW()) = 0, 1, TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE), NOW()) + 1) AS joinDate			    	   
   			    	   , MI.grade as grade
   			    	   , MI.profile as profile
			    	   , UC.user_challenge_id as userSeq
			    FROM CHALLENGE_SUBMISSION CS 
			    JOIN USER_CHALLENGE UC 
			    ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
			    JOIN MEMBER_INFO MI 
			    ON UC.EMAIL = MI.EMAIL 			    
			where UC.EMAIL = #{email} 	
	</select>
	
	<!-- 본인 미션 달력 -->
	<select id="missionCalendarOwn" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT 	  EMAIL
				, CHALLENGE_SUBMISSION_ID				
				, SUBMISSION_TEXT 
				, SUBMISSION_DATE
				, SUBMISSION_TIME
				, SUBMISSION_COMPLETED		
		FROM CHALLENGE_SUBMISSION CS 
	 		JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
		WHERE CS.SUBMISSION_DATE LIKE #{date}				
				AND UC.EMAIL = #{email}
		GROUP BY CS.SUBMISSION_DATE 
	</select>
		
	<!-- 본인 미션 상세정보 -->
	<select id="missionAuthInfo" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
				SELECT 	  UC.EMAIL						
						, CS.CHALLENGE_SUBMISSION_ID						
						, SUBMISSION_TEXT 
						, SUBMISSION_DATE as SUBMISSION_DAY
						, SUBMISSION_TIME
						, SUBMISSION_IMAGE_ROUTE 
						, SUBMISSION_COMPLETED
						, MI.NICK_NAME
						, MI.GRADE						
						, MI.PROFILE
				FROM CHALLENGE_SUBMISSION CS 
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
			JOIN MEMBER_INFO MI 
			    ON UC.EMAIL = MI.EMAIL
			WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}				
				GROUP BY CS.SUBMISSION_DATE  
	</select>
	
	<!-- 본인 미션 수정 -->
	<update id="missionUpdate" parameterType="ChallengeSubmissionDto">
		UPDATE CHALLENGE_SUBMISSION SET SUBMISSION_TEXT = #{submissionText} WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}
	</update>
	
		<!-- 태그 삭제 -->
	<update id="deleteTag" parameterType="ChallengeSubmissionDto">
		DELETE FROM SUBMISSION_HASH_TAG WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}
	</update>
	
	
	<!-- 본인 미션 상세정보 댓글-->
	<select id="missionComment" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
			SELECT 	 CM.comment_seq as COMMENT_SEQ
				,CM.email as USER_EMAIL
				,CM.content as USER_CONTENT
				,MI.nick_name as USER_NICK_NAME 
				,CM.parent_id as PARENT_ID
				,CM.update_date as USER_UPDATE_DATE
				,CM.regist_date as USER_REGIST_DATE
				,MI.PROFILE
				,MI.GRADE
				,CM.COMMENT_STATE
				,  CASE
        			WHEN (SELECT rank FROM RANKING_TOP WHERE email = MI.EMAIL) IN (1, 2, 3)
        			THEN (SELECT rank FROM RANKING_TOP WHERE email = MI.EMAIL)
        			ELSE 0
    				END AS rank
				FROM COMMENT CM 		 
			JOIN CHALLENGE_SUBMISSION CS 
				ON CM.CHALLENGE_SUBMISSION_ID = CS.CHALLENGE_SUBMISSION_ID
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
			JOIN MEMBER_INFO MI
				ON MI.EMAIL = CM.EMAIL						
		WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}		
		ORDER BY COMMENT_SEQ
	</select>
	
	<!-- 본인 미션 상세정보 좋아요-->
	<select id="missionLikes" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
		SELECT
		    MI.EMAIL,
		    MI.NICK_NAME AS NICKNAME,
		    MI.GRADE,
		    MI.PROFILE,
		    CASE
		        WHEN (SELECT rank FROM RANKING_TOP WHERE email = MI.EMAIL) IN (1, 2, 3)
		        THEN (SELECT rank FROM RANKING_TOP WHERE email = MI.EMAIL)
		        ELSE 0
		    END AS rank
		FROM
		    LIKES LI
		JOIN MEMBER_INFO MI
			ON LI.EMAIL = MI.EMAIL 
		WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}								 					
	</select>		

	<!-- 본인 미션 상세정보 해쉬태그-->
	<select id="missionHashTag" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
		SELECT TAG_NAME as HASH_TAG	 
		  FROM SUBMISSION_HASH_TAG SUT
			JOIN HASH_TAG HT 
				ON SUT.HASH_TAG_ID = HT.HASH_TAG_ID
			JOIN CHALLENGE_SUBMISSION CS 
				ON SUT.CHALLENGE_SUBMISSION_ID = CS.CHALLENGE_SUBMISSION_ID
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID						
		WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 			
			
	</select>		
	
	
	
		<!-- 본인 미션 정보 좋아요 삭제 -->
	<delete id="missionDeleteComment" parameterType="ChallengeSubmissionDto" >
		DELETE FROM COMMENT WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 
	</delete>	
		<!-- 본인 미션 정보 좋아요 삭제 -->
	<delete id="missionDeleteLikes" parameterType="ChallengeSubmissionDto" >
		DELETE FROM LIKES WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 
	</delete>		
		<!-- 본인 미션 정보 태그 삭제 -->
	<delete id="missionDeleteHashTag" parameterType="ChallengeSubmissionDto" >
		DELETE FROM SUBMISSION_HASH_TAG WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 
	</delete>	
		<!-- 본인 미션 정보 삭제 -->
	<delete id="missionDeleteSubmission" parameterType="ChallengeSubmissionDto" >
		DELETE FROM CHALLENGE_SUBMISSION WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 
	</delete>
		
	<!-- 내 미션 누적 달성 횟수 -->
	<select id="missionCompletedSum" parameterType="String" resultType="int" >
		SELECT count(*) as own 		
		 FROM CHALLENGE_SUBMISSION CS 
		  JOIN USER_CHALLENGE UC 
		   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID		 
		   AND UC.EMAIL = #{email} 					 
	</select>
	
	<!-- 등급 업데이트 -->
	<update id="updateGrade" parameterType="MemberDto" >
		UPDATE MEMBER_INFO SET GRADE = #{grade} WHERE EMAIL = #{email};			 
	</update>
	 
	 <!-- 회원가입 날짜 -->
	<select id="joinDate" parameterType="String" resultType="int" >
		SELECT IF(TIMESTAMPDIFF(DAY, DATE(JOIN_DATE), NOW()) = 0, 1, TIMESTAMPDIFF(DAY, DATE(JOIN_DATE), NOW()) + 1) AS joinDate FROM MEMBER_INFO MI  
			WHERE EMAIL = #{email} ; 
	</select>
	
	<!-- 총 사용자 수 -->
	<select id="findMemCnt" parameterType="MemberDto" resultType="int" >
		SELECT COUNT(*) FROM MEMBER_INFO
	</select>	
	
	<!-- 오늘 미션 성공 유무 -->
	<select id="missionYn" parameterType="String" resultType="int" >
		SELECT COUNT(*) FROM CHALLENGE_SUBMISSION CS 
			JOIN USER_CHALLENGE UC  
			ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
		WHERE UC.EMAIL = #{email} AND SUBMISSION_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d')
	</select>		 
	 
	 
	<!-- 실시간 본인 랭킹 -->
	<select id="OwnRanking" parameterType="MemberDto" resultType="java.util.Map" >
	
			SELECT  rank 
			   ,USER_SEQ as userSeq
			   ,EMAIL as email
			   ,nick_name as nickName
			   ,SUCCESS_CNT as successCnt
			   ,JOIN_DATE as joinDate
			   ,grade
			   ,profile
				FROM RANKING_TOP RT WHERE EMAIL = #{email} order by rank 		 
	</select>	 
	
	<!-- 랭킹 Top 3인지 확인 -->
	<select id="isTopRank" parameterType="RankingDto" resultType="String">
		select rank from RANKING_TOP WHERE email = #{email} 
	</select>		
	 
	 
</mapper>