<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.upside.api.mapper.MemberMapper">
	
	<!-- 내 미션 달성 횟수 , 참가자 평균 -->
	<select id="missionCompletedCnt" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT count(*) as own , 
		 (SELECT ROUND(AVG(COUNT)) FROM (
		   SELECT COUNT(*) as count
		 	 FROM CHALLENGE_SUBMISSION CS 
			  JOIN USER_CHALLENGE UC 
			   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
			  WHERE YEAR(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{year} 
			  	AND MONTH(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{month}
			  GROUP BY UC.EMAIL ) AS counts) as userAvg
		 FROM CHALLENGE_SUBMISSION CS 
		  JOIN USER_CHALLENGE UC 
		   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
		  WHERE YEAR(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{year} 
			  	AND MONTH(STR_TO_DATE(CS.submission_date, '%Y-%m-%d')) = #{month} 
		   		AND UC.EMAIL = #{email}					 
	</select>

	<!-- 실시간 랭킹 TOP 3 -->
	<select id="missionRankingTop" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT @rank := @rank + 1 AS ranking ,t.userSeq , t.email , t.NICK_NAME, t.count as successCnt , t.joinDate , t.grade , t.profile
			FROM (
			    SELECT MI.NICK_NAME
			    	   , COUNT(*) AS count
			    	   , TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE) ,NOW()) AS joinDate
			    	   , MI.grade
			    	   , MI.profile
			    	   , UC.user_challenge_id as userSeq
			    	   , uc.email
			    FROM CHALLENGE_SUBMISSION CS 
			    JOIN USER_CHALLENGE UC ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
			    JOIN MEMBER_INFO MI ON UC.EMAIL = MI.EMAIL 			    
			    GROUP BY UC.EMAIL 
			    ORDER BY COUNT(*) DESC 
			) t, (SELECT @rank := 0) r 
			ORDER BY ranking ASC 
			LIMIT 3;		 
	</select>
	
	<!-- 실시간 본인 랭킹 -->
	<select id="missionRankingOwn" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT val.rank, val.userSeq, val.email , val.nickName, val.count as successCnt, val.joinDate , val.grade , val.profile
			FROM (
			  SELECT @rank := @rank + 1 AS rank, t.userSeq , t.email, t.nickName, t.count , t.joinDate , t.grade , t.profile
			  FROM (
			    SELECT   UC.EMAIL
			    	   , MI.NICK_NAME as nickName
			    	   , COUNT(*) AS count
			    	   , TIMESTAMPDIFF(DAY, DATE(MI.JOIN_DATE) ,NOW()) AS joinDate
   			    	   , MI.grade
   			    	   , MI.profile
			    	   , UC.user_challenge_id as userSeq			    	   
			    FROM CHALLENGE_SUBMISSION CS 
			    JOIN USER_CHALLENGE UC 
			    ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID
			    JOIN MEMBER_INFO MI 
			    ON UC.EMAIL = MI.EMAIL 			    
			    GROUP BY UC.EMAIL 
			    ORDER BY COUNT(*) DESC
			  ) t, (SELECT @rank := 0) r 
			) val 
			WHERE val.email = #{email} 		 
	</select>
	
	<!-- 본인 미션 달력 -->
	<select id="missionCalendarOwn" parameterType="MemberDto" resultType="java.util.Map" >
		SELECT 	  EMAIL
				, CHALLENGE_SUBMISSION_ID
				, CHALLENGE_NAME
				, SUBMISSION_TEXT 
				, SUBMISSION_DATE
				, SUBMISSION_TIME
				, SUBMISSION_COMPLETED		
		FROM CHALLENGE_SUBMISSION CS 
	JOIN USER_CHALLENGE UC 
	ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
	WHERE CS.SUBMISSION_DATE LIKE #{date}
	AND UC.CHALLENGE_NAME = #{challengeName}
	AND UC.EMAIL = #{email}
	GROUP BY CS.SUBMISSION_DATE ; 
	</select>
		
	<!-- 본인 미션 상세정보 -->
	<select id="missionAuthInfo" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
				SELECT 	  UC.EMAIL
						, CHALLENGE_NAME
						, CS.CHALLENGE_SUBMISSION_ID						
						, SUBMISSION_TEXT 
						, SUBMISSION_DATE as SUBMISSION_DAY
						, SUBMISSION_TIME
						, SUBMISSION_IMAGE_ROUTE 
						, SUBMISSION_COMPLETED
						, MI.NICK_NAME
						, MI.GRADE						
						, MI.PROFILE
				FROM CHALLENGE_SUBMISSION CS 
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
			JOIN MEMBER_INFO MI 
			    ON UC.EMAIL = MI.EMAIL
			WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}				
				GROUP BY CS.SUBMISSION_DATE  
	</select>
	
	<!-- 본인 미션 수정 -->
	<update id="missionUpdate" parameterType="ChallengeSubmissionDto">
		UPDATE CHALLENGE_SUBMISSION SET SUBMISSION_TEXT = #{submissionText} WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}
	</update>
	
	<!-- 본인 미션 상세정보 댓글-->
	<select id="missionComment" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
		SELECT 	 CM.comment_seq as USER_SEQ
				,CM.email as USER_EMAIL
				,CM.content as USER_CONTENT
				,MI.nick_name as USER_NICK_NAME 
				,CM.parent_id as PARENT_ID
				,CM.update_date as USER_UPDATE_DATE
				,CM.regist_date as USER_REGIST_DATE
				,MI.PROFILE
				,MI.GRADE				 
				FROM COMMENT CM 		 
			JOIN CHALLENGE_SUBMISSION CS 
				ON CM.CHALLENGE_SUBMISSION_ID = CS.CHALLENGE_SUBMISSION_ID
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
			JOIN MEMBER_INFO MI
				ON MI.EMAIL = CM.EMAIL						
		WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 					
		ORDER BY COMMENT_SEQ
	</select>
	
	<!-- 본인 미션 상세정보 좋아요-->
	<select id="missionLikes" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >		
		SELECT MI.EMAIL , MI.NICK_NAME as NICKNAME , MI.GRADE , MI.PROFILE FROM LIKES LI
			JOIN MEMBER_INFO MI
			ON LI.EMAIL = MI.EMAIL 
		WHERE CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId}						 					
	</select>		

	<!-- 본인 미션 상세정보 해쉬태그-->
	<select id="missionHashTag" parameterType="ChallengeSubmissionDto" resultType="java.util.Map" >
		SELECT TAG_NAME as HASH_TAG	 
		  FROM SUBMISSION_HASH_TAG SUT
			JOIN HASH_TAG HT 
				ON SUT.HASH_TAG_ID = HT.HASH_TAG_ID
			JOIN CHALLENGE_SUBMISSION CS 
				ON SUT.CHALLENGE_SUBMISSION_ID = CS.CHALLENGE_SUBMISSION_ID
			JOIN USER_CHALLENGE UC 
				ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID						
		WHERE CS.CHALLENGE_SUBMISSION_ID = #{challengeSubmissionId} 			
			
	</select>		
	
	<!-- 본인 미션 정보 삭제 -->
	<delete id="missionAuthDelete" parameterType="MemberDto" >
		DELETE FROM FILE_UPLOAD 
	WHERE UPLOAD_DATE = #{date}
	AND EMAIL =  #{email}  
	</delete>	
	
	<!-- 본인 미션 정보 삭제 parameterType="String" resultType="String" -->
	<select id="memberDelete" statementType="CALLABLE" resultType="hashmap"> 
		 CALL DELETE_MEMBER (#{email, mode=IN}, #{COMPLETED , mode=OUT, jdbcType=VARCHAR}) 
	</select>	
	
	<!-- 내 미션 누적 달성 횟수 -->
	<select id="missionCompletedSum" parameterType="String" resultType="int" >
		SELECT count(*) as own 		
		 FROM CHALLENGE_SUBMISSION CS 
		  JOIN USER_CHALLENGE UC 
		   ON CS.USER_CHALLENGE_ID = UC.USER_CHALLENGE_ID		 
		   AND UC.EMAIL = #{email} 					 
	</select>
	
	<!-- 등급 업데이트 -->
	<update id="updateGrade" parameterType="MemberDto" >
		UPDATE MEMBER_INFO SET GRADE = #{grade} WHERE EMAIL = #{email};			 
	</update>
	 
	 <!-- 회원가입 날짜 -->
	<select id="joinDate" parameterType="String" resultType="java.util.Map" >
		 SELECT DATE(JOIN_DATE) as joinDate FROM MEMBER_INFO MI 
			WHERE EMAIL = #{email} ; 
	</select>
	
	<!-- 총 사용자 수 -->
	<select id="findMemCnt" parameterType="MemberDto" resultType="int" >
		SELECT COUNT(*) FROM MEMBER_INFO
	</select>	
	
	<!-- 오늘 미션 성공 유무 -->
	<select id="missionYn" parameterType="String" resultType="int" >
		SELECT COUNT(*) FROM CHALLENGE_SUBMISSION CS 
			JOIN USER_CHALLENGE UC  
			ON UC.USER_CHALLENGE_ID = CS.USER_CHALLENGE_ID
		WHERE UC.EMAIL = #{email} AND SUBMISSION_DATE = DATE_FORMAT(NOW(), '%Y-%m-%d')
	</select>		 
	 
	 
	 
</mapper>